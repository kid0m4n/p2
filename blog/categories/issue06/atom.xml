<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: issue06 | P2 Magazine]]></title>
  <link href="http://thoughtworks.github.io/p2/blog/categories/issue06/atom.xml" rel="self"/>
  <link href="http://thoughtworks.github.io/p2/"/>
  <updated>2014-04-02T21:03:51+05:30</updated>
  <id>http://thoughtworks.github.io/p2/</id>
  <author>
    <name><![CDATA[The P2 Elves]]></name>
    <email><![CDATA[p2@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Credits]]></title>
    <link href="http://thoughtworks.github.io/p2/issue06/credits/"/>
    <updated>2013-11-12T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue06/credits</id>
    <content type="html"><![CDATA[<p><strong>Editorial Committee</strong></p>

<p>Ryan Boucher, Rachel Laycock, Rebecca Parsons, Sarah Howe</p>

<p><strong>Writers</strong></p>

<p>Musa Kurhula Baloyi, Ryan Boucher, Ian Cartwright, Sarah Howe, Rachel Laycock, Scott Robinson, Adam Scott, Nick Thorpe</p>

<p><strong>Art</strong></p>

<p>Ryan Boucher – sorry.</p>

<p><strong>Site Design</strong></p>

<p>Ryan Boucher, Andrew Carr, Mike Gardiner</p>

<p><strong>Photo Credit</strong></p>

<p>The Great Wall of China &ndash; Rachel Laycock</p>

<p><strong>Special Thanks</strong></p>

<p>Sean Ho, Adam Monago, Scott Robinson, John Stojanovski</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle]]></title>
    <link href="http://thoughtworks.github.io/p2/issue06/puzzle/"/>
    <updated>2013-11-11T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue06/puzzle</id>
    <content type="html"><![CDATA[<p>Welcome to the final puzzle for 2013. Consider this four-way intersection with a set of traffic lights. The speed limit on all roads shown is 80km/h (or 50 mph).</p>

<p><img src="/p2/images/puzzle/intersection.png" alt="Intersection" /></p>

<p>You are travelling at the speed limit and you reach the point before the intersection where when the lights turn orange, you are uncertain about whether you will make it across before the lights go red. The longer you take to make up your mind, the less time you have to take action. Especially when you realise you should be braking. The town I grew up in, raised the stakes by putting in a combination of red-light cameras and speed cameras.</p>

<p>I think that such intersections can be improved. So this month’s puzzle is: how could we improve the the intersection so that it’s easier to decide whether you should stop or continue at speed?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve This]]></title>
    <link href="http://thoughtworks.github.io/p2/issue06/improve-this/"/>
    <updated>2013-11-10T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue06/improve-this</id>
    <content type="html"><![CDATA[<p><em>In improve this we take a look at a reader submitted test, user interface, story or block of code and we try and improve it, without context, explaining what we did as we went.</em></p>

<p>This month&rsquo;s Improve This comes from Musa. Musa started with some code that he wrote before joining ThoughtWorks. He wanted to look back at what he&rsquo;d learnt and see how the code he used to write has changed.</p>

<p>The code below populates sets up the initial board state for the game of Ncuva.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="1.py"></code></div>


<p>The for loop makes use of 3 global variables: the <span class="inline-code">length</span>, <span class="inline-code">width</span> and number of <span class="inline-code">stones</span> in each slot. The <span class="inline-code">length</span> and <span class="inline-code">width</span> control how much looping is done. The two cases for the number of stones catered for here are 2 and 3.</p>

<p>Executing this code will give rise to a structure like this:</p>

<p><img src="/p2/images/improve-this/ncuva.png" alt="Ncuva Board Layout" /></p>

<p>As you can see from the figure displayed above, there is a pattern at work here. The pattern screams out: there are too many 2&rsquo;s! We gather that we do not have to loop through all of <span class="inline-code">a</span> to know how many stones to place in each slot.</p>

<p>On having noticed the pattern, we go ahead and fill <span class="inline-code">a</span> with 2 or 3 stones according to the user&rsquo;s choice. How many corrections would we have to do if we filled <span class="inline-code">a</span> with 2&rsquo;s? Would this approach provide any savings? 6 (at best 4) corrections are better than 4x10x5 (at worst 4x10x7) checks.</p>

<p>For the time being we leave out all the if statements.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="3.py"></code></div>


<p>Instead of going another iteration around the board, we just pick the specific indices that have been assigned wrongly and give them correct values.</p>

<p>In fact, this for-loop can be optimised out by using the built-in map function.</p>

<p>According to ncuva rules, at the beginning of each game, the first and second slots in the second and third rows will always have no stone and 1 stone, respectively. If you look at the figure, you should notice that these slots are mirror images of each other. So we go ahead and assign these slots accordingly.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="4.py"></code></div>


<p>Since Python has the ability to count from the end of a list going backwards, we can replace the calculation width &ndash; some_number with the negative of some_number. In fact, we do not need the <span class="inline-code">if</span> as <span class="inline-code">a</span> will not be changed incorrectly for stones = 2 or stones = 3.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="5.py"></code></div>


<p>We now introduce a method so that a can be populated whenever needed and not just once when the game starts. <span class="inline-code">set_board_up</span> takes length, width and stones as input. This means we can get rid of these three lines:</p>

<div class='normal-gist'><code id="gist-7301907" data-file="6.py"></code></div>


<p>Comments and global variables are a sign of bad design.</p>

<p>We have given the method a meaningful name and so now we rename the variable <span class="inline-code">a</span> to board. We could probably guess that <span class="inline-code">a</span> is an array but we would never know where, when or how it is used. At the very least, the name board gives a hint.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="7.py"></code></div>


<p>In the method, we make other small naming changes. We change <span class="inline-code">width</span> to <span class="inline-code">breadth</span> to adhere to naming conventions when working with rectangles. In the same vein, ncuva players don&rsquo;t only use stones as their tokens, they can use makanyi (morula fruit) or timongo (dry morula fruit), so we use the more generic term: tincuva.</p>

<p>Another small refactoring we can do to make the method shorter is make use of destructuring assignment to make multiple variable assignments on the same line. I made the judgment call of multiply assigning slots with the same value for readability. I could have done it on a per row basis.</p>

<div class='normal-gist'><code id="gist-7301907" data-file="8.py"></code></div>


<p>The question is: why didn&rsquo;t I come straight to this last result? The answer is simple: when you don&rsquo;t know where you&rsquo;re going, it&rsquo;s hard to get there. Rewriting and testing the code with python helped me understand the code and intended result better. The thing with refactoring and clean code is that it is obvious afterwards, but not when you first write the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CD and DevOps: Partners in Crime]]></title>
    <link href="http://thoughtworks.github.io/p2/issue06/cd-and-devops"/>
    <updated>2013-11-09T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue06/cd-and-devops</id>
    <content type="html"><![CDATA[<p>A team working well is one where the developers not only build the code, but also the automation for deploying the software and the ability to monitor and support it. Done right this means the team is doing DevOps <strong>and</strong> Continuous Delivery. Right from day one they are building out Continuous Integration, coding the deployment mechanisms and setting up dashboards and alerts for the deployed code. When they showcase code, it is code that <strong>has</strong> been deployed to a realistic environment, so if required that code really could be deployed.</p>

<p>Even before go-live the team is pushing code to various environments. Often going live is about opening up firewalls and configuring DNS, the code is done. The team&rsquo;s test suite includes checks that code is live and available in different environments, often using a subset of the acceptance tests. Logging and alerting is in place, and has been evolved over time as new features are added. Requirements include acceptance criteria for both business users and for those who will monitor the system.</p>

<p>DevOps and Continuous Delivery done together are two practices that reinforce each other, but if done on their own can create pain for your teams and increase the cost of your software. We&rsquo;re going to help you identify that pain, so you know how to apply the fix.</p>

<h3>Heuristic: &ldquo;Over the wall&rdquo; support</h3>

<p>The predominant model in software delivery continues to be for a project team to throw software &ldquo;over the wall&rdquo; to a support group. The pain this causes have been well documented, lowlights include:</p>

<ul>
<li>The support group is treated as 2nd class citizens; maintenance is often seen as less desirable career-wise.</li>
<li>Must-have operational features such as logging and alerting are deliberately ignored to save project budget. They end up being added later by the support team.</li>
<li>Software in &ldquo;support-mode&rdquo; decays over time, eventually necessitating replacement.</li>
<li>Project developers rarely learn how to improve their software as they don&rsquo;t have to deal with the consequences of their decisions.</li>
<li>A lot of cost and complexity is introduced through organisational hand off from a project team to the support team. It often involves hefty paperwork and signing-off documents.</li>
</ul>


<p>These issues sit against a background of an increasing pace of delivery and innovation in our industry. This is leaving many companies behind who are unable to compete in the face of organisations that can release in weeks what once took months to get out the door.</p>

<blockquote><p>&ldquo;DevOps as a role does not make it a practice.&rdquo;</p></blockquote>

<h3>Heuristic: Ops 2.0: DevOps</h3>

<p>The first key issue to overcome is a fundamental and unfortunately increasingly common mis-understanding of DevOps: Ops people are just being re-labeled as DevOps. This misses the point entirely, if one of these relabelled Ops people is on the team this does not mean you are doing DevOps. A role does not a practice or discipline make!</p>

<p>DevOps is a practice the whole team does. Unfortunately, many teams just have an Ops person to set up CI, do some deployment scripts, and maybe turn up just before the first release. This is no better than the Build Guy that has to do everyone else&rsquo;s merges!</p>

<h3>Heuristic: Stop waiting for the specialist</h3>

<p>The lack of on-team knowledge means things like new integration points or configuration of new environments get deferred until the Ops person is available to help the team. This can mean there are large periods where the team could not &ldquo;push&rdquo; the release button and are often doing showcases in unrealistic environments. In turn this means stories can get signed off as done when they are effectively saying they are &ldquo;done on dev&rdquo; or &ldquo;done in test&rdquo;. In CD done means released into a prod-like environment so a false indication of progress is given by ignoring the fact a requirement is not really delivered until it is deployable to production.</p>

<p>It is good to have an Ops specialist to help the team, but it&rsquo;s important to have the whole team do the actual DevOps work and share the knowledge.</p>

<h3>Heuristic: Where is the value in that?</h3>

<p>A further trap is that many business sponsors have been trained to defer ops requirements. They are used to leaving these until the end or not having to prioritise them at all. There can be pressure during delivery to just focus on the requirements that add business value visibly. Although of course if you can&rsquo;t deploy the software you are not going to get any value at all! So you need to treat your operational requirements as a first class citizen.</p>

<blockquote><p>&ldquo;You are only going to get maximum value out of DevOps if you do CD and visa versa.&rdquo;</p></blockquote>

<h3>Heuristic: No Monitoring</h3>

<p>Many teams who are starting to adopt CD have no way to monitor or get alerted about issues after deployment. You can&rsquo;t do continuous anything without feedback so you should be adding logging in from day one, placing application stats and alerts on an information radiator. Of course on day one the log file might just say &ldquo;deployment: version #&rdquo; and the amount of logging needed will evolve over time. The trap to avoid is to go-live and then find out there is no monitoring in production, you might be doing CD, but you are running a large risk of an outage or even not knowing there is one until users complain.</p>

<h3>Heuristic: Big Bang Continuous Delivery</h3>

<p>Another anti-pattern is the team who plan to have CD, but only after the first release. So they spend several months doing manual or unrealistic deployments always planning to do &ldquo;CD&rdquo; at the end, perhaps by adding in some &ldquo;DevOps&rdquo; resource during the last week or so.</p>

<p>This doesn&rsquo;t work as there is no way to understand the impact of technical decisions on deployment and monitoring until the very end. It also means the first release might be the first time the automation gets tested, this is no better than a big bang release.</p>

<p>The deployability of software is not something that just happens. You need to design for it and test it. When you get there the first actual production release should be a non-event. The question of deployability and testability applies equally to Off-The-Shelf software, so don&rsquo;t forget this when gathering your requirements.</p>

<p style="text-align:center;"> ⁂</p>

<p>All of these situations can be avoided by having teams doing Continuous Delivery and DevOps as cross-team disciplines. By having developers more exposed the issues of deployment and production, they get to learn how their decisions impact an organisation downstream. DevOps and CD have value on their own, but are at their best when done together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Gripes, Part II]]></title>
    <link href="http://thoughtworks.github.io/p2/issue06/build-gripes"/>
    <updated>2013-11-08T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue06/build-gripes</id>
    <content type="html"><![CDATA[<p><strong><em>build system (noun)</em></strong>: <em>something hundreds of thousands of people spend 40 hours a week in fear of causing. See also: sin, punishment.</em></p>

<h3>Problem: &ldquo;I checked in all our dependencies! Now our build is self-contained!&rdquo;</h3>

<p>Checking in dependencies is borrowing from Peter to pay Paul. Or, to borrow an old joke: some people, when faced with having to continually pull from a dependency, think &ldquo;I know, I&rsquo;ll just fork and maintain my own dependencies!&rdquo; Now they have two problems.</p>

<p>Do not check-in dependencies. The problem of dependencies is not one of <em>version control</em> (tracking changes) but of <em>artifact control</em> (ensuring uniformity).</p>

<h4>Current Solutions:</h4>

<p><strong>A download script.</strong></p>

<p>Go read <a href="/p2/issue04/build-gripes">Build Gripes, Part I</a>. Recall and recoil at the terror of the bootstrap.sh / go.sh.</p>

<p><strong>An artifact cache.</strong></p>

<p>Things like maven, bundler, apt-get and friends all have well known and well maintained transparent local caches.</p>

<p>Please note well each word: &ldquo;transparent&rdquo;, &ldquo;local&rdquo;, and &ldquo;cache&rdquo;.</p>

<p><em>Transparent</em>: because the dependency resolution tool thinks it is pulling from the canonical source. Therefore the cache fails-safe with dependency resolution still being possible without it.</p>

<p><em>Local</em>: so we control it and it’s fast.</p>

<p><em>Cache</em>: lets us purge the whole thing and the only downside will be slower builds.</p>

<p>Two scheduled jobs are handy:</p>

<ol>
<li>Pulling new versions of dependencies.</li>
<li>Detecting stale versions of stored dependencies.</li>
</ol>


<h3>Problem: &ldquo;How do I know which dependencies works?&rdquo;</h3>

<p>A security update for FavouriteFramework just came out. And one for FavouriteOperatingSystem. Oh snap, and another (except this one was bundled into a minor release) one for MinorXMLParsingDSLLibraryThing came out. And they all came out on the same day.</p>

<p>So, who wants to call: <span class='inline-code'>make update-dependencies</span> and push the new build?</p>

<p>Oh, of course I will. I trust upstream to not have broken anything. In fact, I’ll just do this for any old version that comes down from above. Wait, no, I mean I’ll only do it for LTS/ESR/major releases. Yes, that’s what I’ll do. I’ll pay IBM, err, Microsoft, err, Red Hat to take the blame for any broken dependencies.</p>

<p>And working through three years of upstream changes is a problem for Future Scott.</p>

<p>sigh. :&ndash;(</p>

<p>This applies any time we have third-party dependencies— security or features or whatever. Flickering builds and mysterious reds because of badly pinned dependencies are so obnoxious. They can paralyze a team for a day sending people looking down the avenues of what <strong>their</strong> code changed.</p>

<p>This is the equivalent of a merge conflict. If it hasn&rsquo;t become obvious yet, I view dependencies and merges as the same thing. I view updating to the new version of a framework as &ldquo;merge hell.&rdquo;</p>

<h4>Current Solutions:</h4>

<p><strong>Canary builds</strong></p>

<p>A daily build (I prefer lunchtime because of food coma) that pulls down the latest dependencies and runs a test suite. The build will go red when the dependencies break the build. Now we have whatever small changes occurred in the last day to fix instead of major changes across the last month (libraries) / year (frameworks) / half-decade (operating systems).</p>

<p><strong>Unpin dependencies entirely and <em>always</em> pull the latest versions.</strong></p>

<p>Schedule the main build to run hourly. Treat reds as if <strong>our</strong> code was broken.</p>

<p>This flips the idea of inward dependencies and outward integrations, and instead views everything as an integration point. It&rsquo;s always the team&rsquo;s job to integrate with the outside world.</p>

<h3>Problem: &ldquo;QA has been down all day? Why didn&rsquo;t you mention it earlier? Yes, you can interrupt the devs!&rdquo;</h3>

<p>A build isn&rsquo;t successful without an artifact. A test suite isn&rsquo;t successful without a report. A deployment isn&rsquo;t successful without a running service.</p>

<p>&ldquo;Build-Test-Deploy&rdquo; is an anti-pattern. It’s &ldquo;Build-Test. Deploy-Test.&rdquo;</p>

<p>I get angry about this, because <strong>every</strong> project I&rsquo;ve been on has fallen into this trap. Why? This is the team variation of Works On My Machine.</p>

<h4>Current Solutions:</h4>

<p><strong>&ldquo;curl <a href="http://example.com/">http://example.com/</a>&rdquo;</strong></p>

<p>It&rsquo;s that easy and will get us 80% of the way there.</p>

<p><strong>Tag artifacts with their source commit</strong></p>

<p>Verify the artifact contains the correct source commit. A deployment, to me, is just another build artifact. In short: <span class='inline-code'>assert <code>curl http://example.com/version.txt</code> == ${commitSHA}</span> # or go home</p>

<h3>Summary</h3>

<p>A cyclist quickly learns to consider every other vehicle on the road to be driven by a homicidal maniac who wants to kill them. As do release engineers feel about, well, everyone else in the bit arranging business.</p>

<p>Getting, merging, and validating upstream artifacts is a job for robots. Releasing working artifacts is our job.</p>

<p>Continuous integration and continuous delivery uber alles.</p>
]]></content>
  </entry>
  
</feed>
