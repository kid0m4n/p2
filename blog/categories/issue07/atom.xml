<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: issue07 | P2 Magazine]]></title>
  <link href="http://thoughtworks.github.io/p2/blog/categories/issue07/atom.xml" rel="self"/>
  <link href="http://thoughtworks.github.io/p2/"/>
  <updated>2014-04-03T23:46:41+05:30</updated>
  <id>http://thoughtworks.github.io/p2/</id>
  <author>
    <name><![CDATA[The P2 Elves]]></name>
    <email><![CDATA[p2@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Credits / About]]></title>
    <link href="http://thoughtworks.github.io/p2/issue07/credits/"/>
    <updated>2013-12-09T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue07/credits</id>
    <content type="html"><![CDATA[<p><strong>What is P2 Magazine?</strong></p>

<p>P2 refers to Pillar 2. Pillar 2, within ThoughtWorks, is software excellence, flanked by pillars one and three of sustainable business and social justice. These three equally support ThoughtWorks.</p>

<p>Software excellence evades definition. It’s easy to think of concise lines of code laid out like prose. But we didn’t want this magazine to be exclusively for those who think in code. ThoughtWorks is filled with testers, designers, analysts and innovators. We had to expand our definition to include the excellence that happens before and after we consider how we solve a problem.</p>

<p><strong>Editorial Committee</strong></p>

<p>Ryan Boucher, Sarah Howe, Rachel Laycock, Rebecca Parsons</p>

<p><strong>Writers</strong></p>

<p>Ryan Boucher, Sarah Howe, Rachel Laycock, Harinee Muralinath, Sathyan Nair, Kornelis Sietsma, Nick Thorpe, Craig Wattrus</p>

<p><strong>Site Design</strong></p>

<p>Ryan Boucher, Andrew Carr, Mike Gardiner</p>

<p><strong>Photo Credit</strong></p>

<p>Los Angeles by Ryan Boucher</p>

<p><strong>Special Thanks</strong></p>

<p>John Stojanovski</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle]]></title>
    <link href="http://thoughtworks.github.io/p2/issue07/puzzle/"/>
    <updated>2013-12-08T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue07/puzzle</id>
    <content type="html"><![CDATA[<p>Last month we had a puzzle where we looked at how we could remove the uncertainty of intersections when the light goes orange and the driver isn’t at that perfect distance where it’s hard to know whether one should keep going or brake.</p>

<p>Chris Tan suggested we replace it with a roundabout. If you see a car stop, if you don’t continue. Kevin Yeung suggested was that we put a counter on the lights to indicate how much time we have left to get across the intersection. This may give you more information and make the decision easier but we think could be made simpler by removing the decision altogether.</p>

<p>This was Fiona Coath’s three suggestions: The most expensive was a network of bridges and tunnels whereby traffic doesn’t need to stop to cross. Next she suggested self driving cars that communicated with each other to resolve the problem and remove the need for traffic lights altogether.</p>

<p>Her simplest and, we feel, best solution was to paint a line on the road at the point which you can still make it through the orange light at the speed limit. If you passed the line when the light goes orange, keep going. If you haven’t then you should stop.</p>

<p>For having the simplest solution we award Fiona the prize: the latest ThoughtWorks T-Shirt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiences Changing Programming Languages]]></title>
    <link href="http://thoughtworks.github.io/p2/issue07/experiences"/>
    <updated>2013-12-07T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue07/experiences</id>
    <content type="html"><![CDATA[<p>In this series we ask ThoughtWorkers to talk about a challenging time for them. A time when learning a new programming language challenged and then changed the way they thought.</p>

<p>This month, Korny tells us his story.</p>

<p>When I started using Clojure, it was a bit like a trip back in time.  I learned to program in C. There you would put data into a struct, then use the right functions to manipulate it.  This was of course risky and dangerous &ndash; structs were mutable, functions were ugly, and dispatching the right function to the right struct was complex and dangerous. Especially with no concept of unit testing.  Then came OO, and C++. You could safely hide that struct from modification by putting it in an object, wrapping all mutation in methods, and dispatching to the right implementation through polymorphism.  Problem solved.</p>

<p>Now we are in the future &ndash; we should have jet-packs and flying cars, but instead, along comes a language where you typically put data into maps (which look suspiciously like structs), and manipulate them with functions.  However, this time it&rsquo;s different: cunning data structures make the maps immutable <strong>and</strong> efficient; multimethods and higher-order functions mean you can dispatch the right functions to the right data however you like &ndash; and with protocols, you can even get a bit newfangled and dispatch that data based on it&rsquo;s type.</p>

<p>Clojure really helped me revisit some of my assumptions.  Nowadays in Ruby or JavaScript, or even in Java, instead of instinctively saying &ldquo;how do I wrap that in an object?&rdquo; I&rsquo;ll consider whether OO is actually appropriate, or whether I can keep things simpler with data structures and a dash of FP.  And I&rsquo;ll try to stamp out mutable state wherever it might lurk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At your service]]></title>
    <link href="http://thoughtworks.github.io/p2/issue07/test-martini"/>
    <updated>2013-12-06T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue07/test-martini</id>
    <content type="html"><![CDATA[<p>UI tests! They suck the life out of me. Maintaining them takes longer than setting up or writing them. It felt like my life was being spent getting tests to go green. It almost drove me insane.</p>

<p style="text-align:center;"> ⁂</p>

<p>On my current project, when we came in, they wanted us to improve their automation framework. It’s a familiar story for me. It was a bunch of UI-driven functional tests that were not designed to scale, were difficult to read, a challenge to understand and defied good coding practices.</p>

<p>We did the best thing we could: we scrapped the framework. We replaced it with the usual: a UI test framework with Cucumber, Webdriver and Fluentlenium. We reminded ourselves that this was the only test automation that would exist for the 2.5 year old product. There were no unit tests to speak of. So we had to build something that would run quickly and efficiently, and we had to build it now.</p>

<p>And we still have to deal with the brittleness of UI tests.</p>

<p>What we needed to solve this was a little change in perspective and smaller change in our framework.</p>

<p>Let&rsquo;s look at an example. Say we have a test in the functional suite like this:</p>

<p>Given I have the book &ldquo;ABC&rdquo; in my shopping cart
And I am on the checkout page
When I purchase the book
Then I should be shown a confirmation message</p>

<p>Now what are we really testing in here? If we think about it, it is the last two lines.
We should have separate tests elsewhere that add books to cart and navigate to a page. What benefit are we getting by driving all those actions through the UI? What benefit do you get from repeating these actions again and again?</p>

<p>Let me answer that for you &ndash; none! You are retesting what is already tested.</p>

<p>You may be thinking at this point. OK, that&rsquo;s interesting. But you can&rsquo;t test the last two lines unless you have performed the pre-requisites?</p>

<p>Correct! This is the small framework change. The steps you don&rsquo;t need to validate, you can drive them directly via the APIs. The APIs behind the scenes are less liable to change than the user interface. This means our tests became less brittle. The roundtrip time for an API call will always be faster than the UI too. This reduces the time to run the tests. Most importantly, we are still testing the significant user action from the UI.</p>

<p>We cut down our four hour test suite to an hour by implementing this one weird, old tip.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virus VI - Malware 2.0]]></title>
    <link href="http://thoughtworks.github.io/p2/issue07/virus-six"/>
    <updated>2013-12-05T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue07/virus-six</id>
    <content type="html"><![CDATA[<p>Last month, we met Z0mbie, the Soviet genius who created the polymorphic Zmist virus. The ultimate stealth weapon.</p>

<p>Z0mbie was part of 29a, a notorious band of virus (VX) writers. “29a” is 666 in Hex. 29a were responsible for the first 64-bit virus, the first Windows 2000 virus, and the first PDA virus.</p>

<p>Have you ever watched a Superhero movie, and found yourself barracking for the bad guys rather than the guy with his undies on the outside? Welcome to VX culture.  You’ll like it here.</p>

<p>With growing public access to the internet, and especially with IRC, VX became an exclusive and very private scene, with its own culture, its own bragging rights, and its own feuds. The viruses were very public, but the VX guys’ real identities were very secret.</p>

<p>29a were the elite.  They even had their own magazine for a while, where members with handles like Wintermute, Heuristic, Ratter, Darkman, and The Slug would provide tips on infection strategies, favourite viruses, and even maths games and logical puzzles (sound familiar, P2 readers)?  There probably aren’t too many old virus writers. Its all about leaving your mark. Prove something. The VX world is a lot like the street art scene: get your paint up in the most public place you can. You don’t want to be famous, just notorious. VX guys would sometimes include code in their malware which would hunt and erase other viruses, if they were feuding with that writer.</p>

<p>Early viruses would simply display a message. “I’m here!”. But as VX culture grew, the payloads became more sophisticated, and sometimes darker. Often it was a prank. the stoned virus would simply boot up a message. The sole message on the screen would be: &ldquo;your PC is now stoned&rdquo; That&rsquo;s it. That was the prank.</p>

<p>Or the the prank could be elaborate.</p>

<p><em>You might see an animated guy  walking across the screen. There was a really cool little virus called “Cascade”. You were sitting at your dos prompt and you had a bunch of text on the screen and all of a sudden one of your characters would fall to the bottom of the screen. It would just fall,  and if one fell it would knock one, it would stop there and that one would continue to go down and it would cascade and rain letters down.  And it wasn&rsquo;t particularly malicious because you could just clear the screen or reissue the action…  but it was fairly annoying depending on what you were doing.</em></p>

<p><em>But after a while &hellip;people were starting to do malicious things, things like killing a disk. Killing a disk is notoriously easy. In the simplest case you just override the sector of the disk and it&rsquo;s no longer bootable. You do that with one int 13 call. How many instructions would that be?  5, tops. The next time someone tried to boot the disk, it wouldn&rsquo;t work.</em></p>

<p>Later, malware started deleting files on the user’s computer.</p>

<p>Then, in 1998 the game changed forever.  CIH, otherwise known as Chernobyl had arrived.
<em>CIH was the first virus that would flash roms. They would flash your BIOS effectively out from underneath you.</em></p>

<p>Your BIOS is the Basic Input Output System of your computer. When you push the “on” button, the first and only thing your computer knows how to do is to read the BIOS. Its like the autonomic nervous system of the computer, and it is stored on a small memory chip mounted on the motherboard. The BIOS makes sure all the hardware &ndash; all the chips, and drives, and the screen, all work together. Its on this platform which everything else rests: the instructions in the BIOS tell the computer how to load the operating system.</p>

<p>CIH used caving to hide, and was designed to trigger on a certain date. In some variants, this date happened to correspond with the Chernobyl nuclear disaster in the Ukraine.</p>

<p><em>Prior to that there was never an instance where a virus could physically hurt your machine. Whereas in this case it would flash your BIOS, your machine just would not know what to do when you booted. It was effectively useless and in those days BIOS chips were directly soldered onto the motherboard. There were very few instances where you could actually take the chip out and put a new one in.</em></p>

<p>For good measure, it also zeroed out the first 1024 KB of your boot drive. For the first time, a virus that could actually render your hardware useless had emerged. Damage from the CIH virus has been estimated at numbers between $20 million and $1 billion dollars globally. Chen Ing Hau (CIH), a Taiwanese university student, had written the virus. It had started spreading on campus at Tatung University, but it went global. It had been shipped with a firmware update to Yamaha CDR drives, and IBM Aptiva drives also shipped with the virus on them.</p>

<p>Welcome to malware 2.0.</p>
]]></content>
  </entry>
  
</feed>
